import { DEBUG } from '@glimmer/env';

function setGlobalContext(context){if(DEBUG){if(globalContextWasSet)throw new Error("Attempted to set the global context twice. This should only be set once.");globalContextWasSet=true;}scheduleRevalidate=context.scheduleRevalidate;scheduleDestroy=context.scheduleDestroy;scheduleDestroyed=context.scheduleDestroyed;toIterator=context.toIterator;toBool=context.toBool;getProp=context.getProp;context.getProperty&&(getProperty=context.getProperty);getPath=context.getPath;setProp=context.setProp;context.setProperty&&(setProperty=context.setProperty);setPath=context.setPath;warnIfStyleNotTrusted=context.warnIfStyleNotTrusted;assert=context.assert;deprecate=context.deprecate;}let scheduleRevalidate=()=>{};let scheduleDestroy;let scheduleDestroyed;let toIterator;let toBool;let getProp;const defaultGetProperty=(parent,key)=>{const prop=typeof key==="number"?String(key):key;return typeof prop==="symbol"?parent[key]:getProp?getProp(parent,prop):parent[prop]};let getProperty=defaultGetProperty;let setProp;const defaultSetProperty=(parent,key,value)=>{const prop=typeof key==="number"?String(key):key;typeof prop==="symbol"?parent[key]=value:setProp?setProp(parent,prop,value):parent[prop]=value;};let setProperty=defaultSetProperty;let getPath;let setPath;let warnIfStyleNotTrusted;let assert;let deprecate;let globalContextWasSet=false;let assertGlobalContextWasSet;let testOverrideGlobalContext;if(DEBUG){assertGlobalContextWasSet=()=>{if(globalContextWasSet===false)throw new Error("The global context for Glimmer VM was not set. You must set these global context functions to let Glimmer VM know how to accomplish certain operations. You can do this by importing `setGlobalContext` from `@glimmer/global-context`")};testOverrideGlobalContext=context=>{let originalGlobalContext=globalContextWasSet?{scheduleRevalidate:scheduleRevalidate,scheduleDestroy:scheduleDestroy,scheduleDestroyed:scheduleDestroyed,toIterator:toIterator,toBool:toBool,getProp:getProp,getProperty:getProperty,setProp:setProp,setProperty:setProperty,getPath:getPath,setPath:setPath,warnIfStyleNotTrusted:warnIfStyleNotTrusted,assert:assert,deprecate:deprecate}:null;globalContextWasSet=context!==null;scheduleRevalidate=context?.scheduleRevalidate||void 0;scheduleDestroy=context?.scheduleDestroy||void 0;scheduleDestroyed=context?.scheduleDestroyed||void 0;toIterator=context?.toIterator||void 0;toBool=context?.toBool||void 0;getProperty=context?.getProperty||defaultGetProperty;getProp=context?.getProp||void 0;setProperty=context?.setProperty||defaultSetProperty;setProp=context?.setProp||void 0;getPath=context?.getPath||void 0;setPath=context?.setPath||void 0;warnIfStyleNotTrusted=context?.warnIfStyleNotTrusted||void 0;assert=context?.assert||void 0;deprecate=context?.deprecate||void 0;return originalGlobalContext};}

export { assert, assertGlobalContextWasSet, setGlobalContext as default, deprecate, getPath, getProp, getProperty, scheduleDestroy, scheduleDestroyed, scheduleRevalidate, setPath, setProp, setProperty, testOverrideGlobalContext, toBool, toIterator, warnIfStyleNotTrusted };
